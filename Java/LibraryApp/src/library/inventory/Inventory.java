package library.inventory;

/** 
 * The base class (parent class / super class) for all types of inventory in the library. 
 * 
 * @author Thomas Marxsen
 * @version 1.0
 * @since 2022.03.23
 */
public class Inventory {
	
	/**
	 * member fields (attributes) each inventory instance (object) stores its own
	 * values unless it's a static field, then it's shared by all instances
	 * (objects) of the class.  Static fields can also be called class variables. 
	 */

	/**
	 * auto incremented counter each time a new inventory item is created, this field
	 * is only updated by the default constructor.
	 */
	private static int counter = 0; //This has to be here. Static means it is class level field

	/**
	 * Default inventory type is Inventory, but this should always get changes
	 * in the subclasses (child class / derived class).  It's final so it 
	 * can't be internally changed.
	 */
	protected final String type = "Inventory"; //Since it's final, probably fine here
	
	/**
	 * The inventory ID, which is auto generated by a static Class counter.
	 */
	protected int id;

	/**
	 * The inventory item's description.
	 */
	protected String description;

	/**
	 * The inventory item's status; enum Status values are CIRCULATING, REFERENCE, and RESERVE.
	 */
	protected Status status; //An enum, pretty much a data type; Makes data validation easier

	/**
	 * The inventory item's condition; enum Condition values are CIRCULATING, REFERENCE, and RESERVE.
	 */
	protected Condition condition;

	/**
	 * Default constructor will automatically runs when an object is created
	 * using the new keyword, and no arguments are passed to the constructor.
	 * 
	 * The Java compiler will create an empty default constructor if the 
	 * programmer doesn't write one. 
	 * 
	 * Typically the default constructor is used to handle housekeeping items when
	 * a object is first created. 
	 */
	public Inventory(){

		/**
		 * There are no setters for the inventory's id because it can only be 
		 * set once in the default constructor, based on the Library inventory count.
		 */
		Inventory.counter++; //use Inventory because it is class level
		this.id = Inventory.counter;

		this.description = null;
		this.status = null;
		this.condition = null;
	}
	
	/**
	 * Overload constructor that allows setting the object's default fields (attributes).
	 * 
	 * @param description Default description of item is null.
	 * @param status Default status is null.
	 * @param condition Default condition is null.
	 */
	public Inventory(String description, Status status, Condition condition){
		
		this(); // call the default constructor
		
		// use the setters to invoke data validation
		this.setDescription(description);
		this.setStatus(status);
		this.setCondition(condition);
	}

	/**
	 * Get the inventory's type.  This is a final field that can't be
	 * changed once set by the inventory class or subclass.  There is
	 * no setter since it can't be changed. 
	 * 
	 * @return The inventory item's type.
	 */
	public String getType() {
		return this.type;
	}

	/** 
	 * The meaning of Encapsulation, is to make sure that "sensitive" data 
	 * is hidden from users.
	 * 
	 * class fields (attributes) should typically be declared as private 
	 * and then provide public get (getters or accessors) and set methods (setters or mutators) 
	 * to access and update the value of a private variable.
	 */

	/**
	 * Get the inventory's ID. There is no setter because this can't be changed
	 * after it's been set by the constructor. 
	 * 
	 * @return The inventory unique ID.
	 */
	public int getId() {
		return this.id;
	}
	
	/**
	 * Get the inventory item's description.
	 * 
	 * @return The inventory item's description.
	 */
	public String getDescription() {
		return this.description;
	}

	/**
	 * Set the inventory item's description.
	 * 
	 * @param description The inventory item's description.
	 */
	public void setDescription(String description) {
		this.description = description;
	}
	
	/**
	 * Get the inventory item's status.
	 * 
	 * @return The inventory item's status (enum CIRCULATING, REFERENCE, OR RESERVE).
	 */
	public Status getStatus() {
		return this.status;
	}

	/**
	 * Set the inventory item's status.
	 * 
	 * @param status The inventory item's status (enum CIRCULATING, REFERENCE, OR RESERVE).
	 */
	public void setStatus(Status status) {
		this.status = status;
	}

	/**
	 * Get the inventory item's condition.
	 * 
	 * @return The inventory item's condition (enum NEW, GOOD, FAIR, or POOR).
	 */
	public Condition getCondition() {
		return this.condition;
	}

	/**
	 * Set the inventory item's condition.
	 * 
	 * @param condition The inventory item's condition (enum NEW, GOOD, FAIR, or POOR).
	 */
	public void setCondition(Condition condition) {
		this.condition = condition;
	}
}
